

Identity.Infrastructure.Persistence > Add UnitOfWork class inheriting  from IUnitOfWork

Identity.Infrastructure.Persistence > Add Repository class inheriting  from IRepository

Identity.Infrastructure.Persistence > Update 'ApplicationDBContext' class;  Add reference to 'Identity.Domain' project


@@

@

Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.Tools

Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.SqlServer

Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.InMemory

Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.Design

Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore

Identity.Infrastructure.Persistence > Add 'Context' folder > Add 'ApplicationDBContext class 

Identity.WebAPI > Set the connectingString in the Startup class

Identity.Infrastructure.Persistence > Add 'Configure' folder > Add a class 'InfrastructurePersistenceServiceCollectionExtensions' > Update 'InfrastructurePersistenceServiceCollectionExtensions';

xAureoDigital-BackEnd-MicroService-Identity > 'Infrastructure.Persistence' folder > Add a Class Libray project named: 'Identity.Infrastructure.Persistence'

Identity.Domain > Add 'Interfaces' folder > Add IRepository interface; Add IUnitOfWork interface

Identity.Domain > 'Model' folder to 'Models'

Identity.Application > Install-Package Microsoft.Extensions.DependencyInjection.Abstractions

Identity.Application > Install-Package Microsoft.Extensions.Configuration.Abstractions

+ It is better to start with creation of a record using HttpPost

Identity.IntegrationTests > install-package moq.automock / Update 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

Update 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

Identity.IntegrationTests > install-package moq

Rename 'Indentity.UnitTests' to 'Identity.UnitTests'

Partial convertion of 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects' from Identity.UnitTests to Identity.IntegrationTests

Identity.IntegrationTests > Add reference to 'Identity.Domain' project

Identity.IntegrationTests > Add reference to 'Identity.WebAPI'

Identity.IntegrationTests > install-package xunit.runner.visualstudio

xAureoDigital-BackEnd-MicroService-Identity > Add on ~/tests/Identity.IntegrationTests a XUnit Test project named: Identity.IntegrationTests;

Identity.WebAPI > Invoke IGetAllCustomersQuery method to get all customers / Identity.Application > Update the class GetAllCustomersQuery and an interface IGetAllCustomersQuery

Identity.WebAPI > Add a Contructor with IGetAllCustomersQuery parameter for DI

Identity.Application > Add reference to 'Identity.Domain' project

Identity.Application > Add on ~/CQRS/Queires a class GetAllCustomersQuery and an interface IGetAllCustomersQuery

Identity.WebAPI > Invoke 'ApplicationServiceCollectionExtensions' on the Startup class

Identity.WebAPI > Add reference to 'Identity.Application'

Identity.Application > Add 'Configure' folder > Add a class 'ApplicationServiceCollectionExtensions';

Identity.Application > Add 'CQRS' folder > Add 'Queries' folder; Add 'Commands' folder;

xAureoDigital-BackEnd-MicroService-Identity > 'Application' folder > Add a Class Libray project named: 'Identity.Application'

Identity.UnitTests > Rename fact 'GetAllCustomers_CallTheMethod_ExpectedResultOkAndEnumerableOfObjects' to 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

Identity.UnitTests > Add fact 'GetAllCustomers_CallTheMethod_ExpectedResultOkAndEnumerableOfObjects'

Identity.UnitTests > Add reference to 'Identity.Domain' project

+ https://docs.microsoft.com/pt-br/dotnet/core/testing/
+ https://docs.microsoft.com/pt-br/aspnet/core/mvc/controllers/testing?view=aspnetcore-5.0
+ https://docs.microsoft.com/pt-br/aspnet/core/test/integration-tests?view=aspnetcore-5.0
+ http://www.macoratti.net/19/10/cshp_unitestmoq1.htm
+ http://www.macoratti.net/19/09/aspc_utst2.htm
+ https://stackoverflow.com/questions/51489111/how-to-unit-test-with-actionresultt

Identity.UnitTests > Add reference to 'Identity.WebAPI'

Identity.UnitTests > install-package xunit.runner.visualstudio

xAureoDigital-BackEnd-MicroService-Identity > > Add XUnit Test project named: Identity.UnitTests;

xAureoDigital-BackEnd-MicroService-Identity > Add 'tests' folder > Add folders 'UnitTests', 'IntegrationTests', and 'EndToEndTests'

#

Identity.WebAPI > Add CustomerController; Update CustomerController; Add reference to 'Identity.Domain' project

Identity.WebAPI > Remove WeatherForecast class and Controller 

Identity.WebAPI > Set as a Stratup project 

xAureoDigital-BackEnd-MicroService-Identity > Services folder > Add a Class Libray project named: 'Identity.WebAPI'

Identity.Domain > Update 'Customer' class attributes
 
Identity.Domain > 'Model' folder > Add a class named: 'Customer'
 
Identity.Domain > Update Entity class attributes

Identity.Domain > Add 'Model' folder > Add a class named: 'Entity'
 
xAureoDigital-BackEnd-MicroService-Identity > Domain folder > Add a Class Libray project named: 'Identity.Domain'

xAureoDigital-BackEnd-MicroService-Identity > Add 'src' folder > Add folders 'Services', 'Application', 'Domain', 'Infrastructure.General', and 'Infrastructure.Persistence' folder;
 
xAureoDigital-BackEnd-MicroService-Identity > Add 'notes' folder > Add GitCommit.txt file to 'notes' folder;
 
Create a blank solution named: 'xAureoDigital-BackEnd-MicroService-Identity';
 
