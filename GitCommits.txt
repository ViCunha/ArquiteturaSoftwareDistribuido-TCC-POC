

+ https://www.youtube.com/watch?v=nY-w9wPFEuY

# TO-DO

    Add a public property into the APIResponseContentFailure

    Define and implement the strategy for logging 
    + https://docs.microsoft.com/pt-br/dotnet/core/extensions/logging?tabs=command-line

    Organize the Startup.cs

    MVC consuming from API 
    + http://www.macoratti.net/19/11/aspc_webapi3.htm
    + https://www.youtube.com/watch?v=aWePkE2ReGw
    + https://www.youtube.com/watch?v=cwgck1k0YKU

    
    http://www.macoratti.net/20/06/aspc_apijwt1.htm


    Create BackgroundTasks for each Bounded Context

    Define the classes as internal by default

    Cosmos DB

# ON-HOLD

    CORS configuration 
    + https://www.youtube.com/watch?v=yozD5Tnd8nw


    Identity.Infrastructure.Persistence > [Event-Sourcing] Create the history of database sequence of immutable events 
    + https://desenvolvedor.io/curso-online-modelagem-de-dominios-ricos/aula/4ded1cee-7104-44e5-b950-3bfaf133bb9e
    + https://desenvolvedor.io/curso-online-modelagem-de-dominios-ricos/aula/361a3216-5a4f-4bc0-912a-6814cbde209b#status
    + https://microservices.io/patterns/data/event-sourcing.html
    + https://www.youtube.com/watch?v=XWTrcBqXi6s
    + https://docs.microsoft.com/en-us/ef/ef6/saving/transactions?redirectedfrom=MSDN

    Identity.Infrastructure.Persistence > [Event-Sourcing] Create feature to get on specific event

    Identity.Infrastructure.Persistence > [Event-Sourcing] Create feature to replay part of the history

    [CRUD] Identity.WebAPI > Add UpdateCustomerAsync method

    [CRUD] Identity.WebAPI > Add DeleteCustomerAsync method



    


# IN-PROGRESS

   [JWT] Identity.WebAPI > Partial update ConfigureServices into the Startup class
   

# DONE 

    xAureoDigital-BackEnd-MicroService-Identity > Update the solution and its projects to .Net 6.0

    [JWT] Identity.WebAPI > Add JWTSettings section into appsettings.json

    [CRUD - READ] Identity.Application.Models > Add CustomerQueryOrchestrator class
    
    [CRUD - READ] Identity.Application.Interfaces > Add ICustomerQueryOrchestrator interface
    
    [CRUD - READ] Identity.Application.Models > Update CustomerApplicationServices class
    
    [CRUD - READ] Identity.Application.Interfaces > Update ICustomerApplicationServices interface
    
    [CRUD - READ] Identity.WebAPI > Add GetCustomerAsync Method

    [Optimistic Concurrency] Update-database -Context ApplicationDbContextCommands

    [Optimistic Concurrency] Add-migration 'AddDataVersionPropertyAndInitializationMethodIntoEntityClass' -Context ApplicationDbContextCommands -Output Migrations/CQRS/Commands

    [Optimistic Concurrency] Identity.Domain.Models > Add DataVersion into Entity class

    [Event Sourcing] Update-database -Context ApplicationDbContextCommands

    [Event Sourcing] add-migration 'RemoveObjectEntityPropertiesInEventSourcingHistory' -Context ApplicationDbContextCommands -Output Migrations/CQRS/Commands

    [Event Sourcing] Identity.Domain.Models.EventSourcing > Update EventSourcingHistory class
    
    [Event Sourcing] Identity.Infrastructure.Persistence.UnitOfWork > Update GenerateEventSourcingAsync method on UnitOfWork Class

    [Event Sourcing] add-migration 'AddObjectIdAndObjectEntityPropertiesInEventSourcingHistory' -Context ApplicationDbContextCommands -Output Migrations/CQRS/Commands; 
    
    [Event Sourcing] Update-database -Context ApplicationDbContextCommands

    [Event Sourcing] Identity.Domain.Models.EventSourcing > Update EventSourcingHistory class
    
    [Event Sourcing] Identity.Infrastructure.Persistence.UnitOfWork > Update GenerateEventSourcingAsync method on UnitOfWork Class

    Identity.Domain > Add class diagrams
    + https://docs.microsoft.com/en-us/visualstudio/ide/class-designer/how-to-add-class-diagrams-to-projects?view=vs-2019


    [Transaction Processing Control] Identity.Application.CQRS.Commands > Update CreateNewCustomerCommandHandler to deal with CustomerDTO and the TransactionProcessingControlId

    [Transaction Processing Control] Identity.Application.Configure > Add ITransactionProcessingControlServices in services of DI

    [Transaction Processing Control] Identity.Infrastructure.Persistence.Repositories > Add ITransactionProcessingControlServices interface 

    [Transaction Processing Control] Identity.Infrastructure.Persistence.Repositories > Add TransactionProcessingControlServices class 

    [Transaction Processing Control] Identity.Domain.Interfaces > Update IUnitOfWork interface  

    [Transaction Processing Control] Update-Database -Context ApplicationDbContextCommands

    [Transaction Processing Control] add-migration 'AddTransactionProcessingControlHistory' -Context ApplicationDbContextCommands -Output Migrations/CQRS/Commands

    [Transaction Processing Control] Identity.Domain.Models > Add TransactionProcessingControlHistory class

    [Transaction Processing Control] Identity.Infrastructure.Persistence.DBContext > DbSet<TransactionProcessingControlHistory> TransactionProcessingControlHistory

    [Transaction Processing Control] Identity.Infrastructure.Persistence.UnitOfWork > Add Repository<TransactionProcessingControlHistory>

    [Transaction Processing Control] Identity.Application.CQRS.Commands > Update CreateNewCustomerCommand to receive CustomerDTO in its constructor 

    [Transaction Processing Control] Identity.Application.Interfaces > Update the signature of ICustomerCommandOrchestrator

    [Transaction Processing Control] Identity.Application.Models > Update CreateNewCustomerAsync to replace the parameter of Customer by CustomerDTO

    [Transaction Processing Control] Identity.Domain.Models.DTO > Implement ITransactionProcessingControl into CustomerDTO
    
    [Transaction Processing Control] Identity.Domain.Models.DTO > Add ITransactionProcessingControl interface

    Identity.Infrastructure.Persistence > Add GetCustomersByIdAsync method on CustomerPersistenceServices; Identity.Application > CreateNewCustomerCommandHandler is checking if the Id already exist

    Rename 'EventSourcingRecord' to 'EventSourcingHistory'; Identity.Domain > [Event-Sourcing] Update EventSourcingHistory class 

    Identity.Infrastructure.Persistence > [Event-Sourcing] > Update the Commands Migrations 
    add-migration 'EventSourcing' -c ApplicationDbContextCommands -output Migrations/CQRS/Commands

    Identity.Domain > [Event-Sourcing] > Create a EventSourcingHistory class on ~/Models/EventSourcing

    Identity.Infrastructure.Persistence > [Event-Sourcing] > Update the contract of T of Repository implementation 

    Identity.Infrastructure.Persistence > [Event-Sourcing] > Add EventSourcingHistory as a Dbset into UnitOfWork

    Identity.Infrastructure.Persistence > [Event-Sourcing] > Add EventSourcingHistory as a Dbset into ApplicationDbContextCommands

    Identity.Domain > [Event-Sourcing] > Add EventSourcingHistory class into ~/Models/EventSourcing
    
    Identity.Domain > [Event-Sourcing] > Create a EventSourcingHistoryType Enum on ~/Models/EventSourcing

    Identity.Domain > Apply some improvements on the Entity class

    Identity.WebAPI > [ApiVersioning] > Define the route in the format: "/api/[public-private]/[controller]/v{version:apiVersion}" into the controllers
    + [ApiVersion("1.0.0")]

    Identity.WebAPI > [ApiVersioning] > Configure the API versioning on Startup.cs 
    + Semantical versioning: 'Major(Breaking Change).Minor(Feature Improvements).Bugs(Failures Corrections)'
    + Chanage the route and include some information in the response header 
    + services.AddApiVersioning(options => options)
    + services.AddApiVersioningExplorer(options => options)
    + https://desenvolvedor.io/curso-online-rest-com-asp-net-core-webapi/aula/a8b6e10d-da45-43b2-b5ef-45e3d97a3304
    + https://semver.org/
    + https://www.youtube.com/watch?v=ryPo5hYHSzM
    + https://www.youtube.com/watch?v=jXAUAWPhIcc&list=PL9XzOCngAkqs0Q8ZRdafnSYExKQurZrBY&index=23
    (URI, query, request header)

    Identity.WebAPI > [ApiVersioning] > Add [ApiVersion("")] into the controllers
    + [MaptoApiVersion()]

    Identity.WebAPI > [ApiVersioning] > install-package Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer

    Identity.WebAPI > [ApiVersioning] > install-package Microsoft.AspNetCore.Mvc.Versioning

    Identity.Application > Update Standarlize the response contents
    + https://docs.microsoft.com/pt-br/azure/architecture/best-practices/api-design
    + https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md
    +   {
          "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
          "title": "One or more validation errors occurred.",
          "status": 400,
          "traceId": "00-6a9cbfcccc787041948eccf2b1b64713-3d3cb58cd4bad040-00",
          "errors": {
            "$.id": [
              "The JSON value could not be converted to System.Guid. Path: $.id | LineNumber: 0 | BytePositionInLine: 18."
            ]
          }
        }

    Identity.Domain > Implement the Fluent Validation in the Entity class
    + http://www.macoratti.net/19/11/aspnc_traterr1.htm
    + http://www.macoratti.net/19/11/aspnc_traterr2.htm
    + https://www.youtube.com/watch?v=mGXPXjxCqhA
    + https://docs.fluentvalidation.net/en/latest/aspnet.html
    + https://stackoverflow.com/questions/45620471/combining-fluentvalidation-and-ivalidatableobject-errors
    + https://github.com/FluentValidation/FluentValidation/issues/545#issuecomment-322757974
    + https://github.com/FluentValidation/FluentValidation
    + https://www.youtube.com/watch?v=Zh1ccvTFzs8&t=107s
    + https://anexinet.com/blog/asp-net-core-fluentvalidation-swagger/
    + https://fluentvalidation.net/
    (Remove business rules from the Entity classes, accept async processing, Inject dependecies into the classvalidator)

    Identity.Application > Partial Update CreateNewCustomerCommandHandler class

    Identity.WebAPI > Update the Startup class to include FluentValidation in the microservice

    Identity.Domain > install-package FluentValidation.AspNetCore # Identity.Domain > Add CustomerValidator on ~/Models/Validations

    Identity.Domain > Add Validations folder on ~/Models # Identity.Application > Rename 'CreateNewCustomerOrchestrator' to 'CustomerCommandOrchestrator'

    Identity.WebAPI > install-package Microsoft.AspNetCore.Mvc.Api.Analyzers

    Identity.Application > Receive and return only DTO-Objects

    xAureoDigital-BackEnd-MicroService-Identity > Apply the sufix 'Async' in all async methods

    Identity.Application > Update CreateNewCustomerCommandHandler; Update CustomerCommandOrchestrator / Identity.Infrastructure > Update ICustomerPersistenceServices and CustomerPersistenceServices
    + http://www.macoratti.net/20/07/aspc_mediatr1.htm
    + http://www.macoratti.net/19/09/aspnc_utst1.htm

    Identity.Application > Add CustomerAutoMapperProfile class implement AutoMapper Profile / Infrastructure.Persistence > Update ICustomerPersistenceServices

    Identity.Application > install-package AutoMapper.Extensions.Microsoft.DependencyInjection

    Identity.Domain > On ~Models/Events Add Message, Event, DomainEvent and Command classes / Implement the Command & CommandHandlers

    xAureoDigital-BackEnd-MicroService-Identity > Remane 'IPersistenceServicesCustomer' to 'CustomerPersistenceServices'

    Identity.Application > Add CustomerApplicationServices class and ICustomerApplicationServices interface

    Identity.Domain > Install-Package MediatR.Extensions.Microsoft.DependencyInjection

    Identity.Domain > Install-Package MediatR

    Identity.Application > Remove MediatR.Extensions.Microsoft.DependencyInjection

    Identity.Application > Remove MediatR

    Identity.Application > Install-Package MediatR.Extensions.Microsoft.DependencyInjection

    Identity.Application > Install-Package MediatR

    Identity.WebAPI > On CustomerController Add Create (HttpPost) method

    Identity.Infrastructure.Persistence > ApplicationDBContextCommands > Add Fluent API configuration files

    Identity.Infrastructure.Persistence > The UnitOfWork and Repository classes to use ApplicationDBContextCommands

    Identity.Infrastructure.Persistence > Delete all previous migrations (into the solution and SGBD)

    Identity.Infrastructure.Persistence > Add ApplicationDBContextCommands class to ~DBContext

    Identity.Infrastructure.Persistence > Implement retries to connect into DBMS
    + Where will be a good place to store the retries default configuratin ?

    Identity.Infrastructure.Persistence > Update Repository class 

    xAureoDigital-BackEnd-MicroService-Identity > Update the 'RepositoryCustomer' to 'PersistenceServicesCustomer'

    Identity.Infrastructure.Persistence > update-database -Context ApplicationDBContextQueries

    Identity.Infrastructure.Persistence > add-migration 'first migration' -Context ApplicationDBContextQueries -Output ~/Migrations/CQRS/Queries

    Identity.WebAPI > Install-package Microsoft.EntityFrameworkCore.Design

    Identity.Infrastructure.Persistence > Add 'Repositories' folder > Add RepositoryCustomer class and extract IPersistenceServicesCustomer interface; Update RepositoryCustomer / Identity.Infrastructure.Persistence > Upddate InfrastructurePersistenceServiceCollectionExtensions

    Identity.Infrastructure.Persistence > Add 'UnitOfWork' folder > Add UnitOfWork class inheriting from IUnitOfWork

    Identity.Infrastructure.Persistence > Add Repository class that implements IRepository 

    Identity.Infrastructure.Persistence > Update 'ApplicationDBContext' class;  Add reference to 'Identity.Domain' project

    Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.Tools

    Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.SqlServer

    Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.InMemory

    Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore.Design

    Identity.Infrastructure.Persistence > Install-Package Microsoft.EntityFrameworkCore

    Identity.Infrastructure.Persistence > Add 'Context' folder > Add 'ApplicationDBContext class 

    Identity.WebAPI > Set the connectingString in the Startup class

    Identity.Infrastructure.Persistence > Add 'Configure' folder > Add a class 'InfrastructurePersistenceServiceCollectionExtensions' > Update 'InfrastructurePersistenceServiceCollectionExtensions';

    xAureoDigital-BackEnd-MicroService-Identity > 'Infrastructure.Persistence' folder > Add a Class Libray project named: 'Identity.Infrastructure.Persistence'

    Identity.Domain > Add 'Interfaces' folder > Add IRepository interface; Add IUnitOfWork interface

    Identity.Domain > 'Model' folder to 'Models'

    Identity.Application > Install-Package Microsoft.Extensions.DependencyInjection.Abstractions

    Identity.Application > Install-Package Microsoft.Extensions.Configuration.Abstractions
    + ! It is better to start the development of a new slution with the creation of a record (using HttpPost)

    Identity.IntegrationTests > install-package moq.automock / Update 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

    Update 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

    Identity.IntegrationTests > install-package moq

    Rename 'Indentity.UnitTests' to 'Identity.UnitTests'

    Partial convertion of 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects' from Identity.UnitTests to Identity.IntegrationTests

    Identity.IntegrationTests > Add reference to 'Identity.Domain' project

    Identity.IntegrationTests > Add reference to 'Identity.WebAPI'

    Identity.IntegrationTests > install-package xunit.runner.visualstudio

    xAureoDigital-BackEnd-MicroService-Identity > Add on ~/tests/Identity.IntegrationTests a XUnit Test project named: Identity.IntegrationTests;

    Identity.WebAPI > Invoke ICustomerQuery method to get all customers / Identity.Application > Update the class GetAllCustomersQuery and an interface ICustomerQuery

    Identity.WebAPI > Add a Contructor with ICustomerQuery parameter for DI

    Identity.Application > Add reference to 'Identity.Domain' project

    Identity.Application > Add on ~/CQRS/Queires a class GetAllCustomersQuery and an interface ICustomerQuery

    Identity.WebAPI > Invoke 'ApplicationServiceCollectionExtensions' on the Startup class

    Identity.WebAPI > Add reference to 'Identity.Application'

    Identity.Application > Add 'Configure' folder > Add a class 'ApplicationServiceCollectionExtensions';

    Identity.Application > Add 'CQRS' folder > Add 'Queries' folder; Add 'Commands' folder;

    xAureoDigital-BackEnd-MicroService-Identity > 'Application' folder > Add a Class Libray project named: 'Identity.Application'

    Identity.UnitTests > Rename fact 'GetAllCustomers_CallTheMethod_ExpectedResultOkAndEnumerableOfObjects' to 'CustomerController_GetAllCustomers_ExpectedResultOkAndCollectionOfObjects'

    Identity.UnitTests > Add fact 'GetAllCustomers_CallTheMethod_ExpectedResultOkAndEnumerableOfObjects'
*
    Identity.UnitTests > Add reference to 'Identity.Domain' project

    + https://docs.microsoft.com/pt-br/dotnet/core/testing/
    + https://docs.microsoft.com/pt-br/aspnet/core/mvc/controllers/testing?view=aspnetcore-5.0
    + https://docs.microsoft.com/pt-br/aspnet/core/test/integration-tests?view=aspnetcore-5.0
    + http://www.macoratti.net/19/10/cshp_unitestmoq1.htm
    + http://www.macoratti.net/19/09/aspc_utst2.htm
    + https://stackoverflow.com/questions/51489111/how-to-unit-test-with-actionresultt

    Identity.UnitTests > Add reference to 'Identity.WebAPI'

    Identity.UnitTests > install-package xunit.runner.visualstudio

    xAureoDigital-BackEnd-MicroService-Identity > > Add XUnit Test project named: Identity.UnitTests;

    xAureoDigital-BackEnd-MicroService-Identity > Add 'tests' folder > Add folders 'UnitTests', 'IntegrationTests', and 'EndToEndTests'

    Identity.WebAPI > Add CustomerController; Update CustomerController; Add reference to 'Identity.Domain' project

    Identity.WebAPI > Remove WeatherForecast class and Controller 

    Identity.WebAPI > Set as a Startup project 

    xAureoDigital-BackEnd-MicroService-Identity > Services folder > Add a Class Libray project named: 'Identity.WebAPI'

    Identity.Domain > Update 'Customer' class attributes
 
    Identity.Domain > Add a class named: 'Customer' at ~Model/ 
 
    Identity.Domain > Update Entity class attributes

    Identity.Domain > Add 'Model' folder > Add a class named: 'Entity' at ~Model/ 
 
    xAureoDigital-BackEnd-MicroService-Identity > Domain folder > Add a Class Libray project named: 'Identity.Domain'

    xAureoDigital-BackEnd-MicroService-Identity > Add 'src' folder > Add folders 'Services', 'Application', 'Domain', 'Infrastructure.General', and 'Infrastructure.Persistence' folder;
 
    xAureoDigital-BackEnd-MicroService-Identity > Add 'notes' folder > Add GitCommit.txt file to 'notes' folder;
 
    Create a blank solution named: 'xAureoDigital-BackEnd-MicroService-Identity'